{"ast":null,"code":"import _objectSpread from \"/Users/ivanflores/Desktop/UCI_HW/Google-Books/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/ivanflores/Desktop/UCI_HW/Google-Books/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/ivanflores/Desktop/UCI_HW/Google-Books/client/src/pages/Saved.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport API from \"../utils/API\";\nimport { Link } from \"react-router-dom\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { List, ListItem } from \"../components/List\";\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Books() {\n  _s();\n\n  // Setting our component's initial state\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        books = _useState2[0],\n        setBooks = _useState2[1];\n\n  const _useState3 = useState({}),\n        _useState4 = _slicedToArray(_useState3, 2),\n        formObject = _useState4[0],\n        setFormObject = _useState4[1]; // Load all books and store them with setBooks\n\n\n  useEffect(() => {\n    loadBooks();\n  }, []); // Loads all books and sets them to books\n\n  function loadBooks() {\n    API.getBooks().then(res => setBooks(res.data)).catch(err => console.log(err));\n  }\n\n  ; // Deletes a book from the database with a given id, then reloads books from the db\n\n  function deleteBook(id) {\n    API.deleteBook(id).then(res => loadBooks()).catch(err => console.log(err));\n  } // Handles updating component state when the user types into the input field\n\n\n  function handleInputChange(event) {\n    const _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value;\n    setFormObject(_objectSpread(_objectSpread({}, formObject), {}, {\n      [name]: value\n    }));\n  }\n\n  ; // When the form is submitted, use the API.saveBook method to save the book data\n  // Then reload books from the database\n\n  function handleFormSubmit(event) {\n    event.preventDefault();\n\n    if (formObject.title && formObject.author) {\n      API.saveBook({\n        title: formObject.title,\n        author: formObject.author,\n        synopsis: formObject.synopsis\n      }).then(res => loadBooks()).catch(err => console.log(err));\n    }\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        size: \"md-6 sm-12\",\n        children: [/*#__PURE__*/_jsxDEV(Jumbotron, {\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Books On My List\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 9\n        }, this), books.length ? /*#__PURE__*/_jsxDEV(List, {\n          children: books.map(book => /*#__PURE__*/_jsxDEV(ListItem, {\n            children: [/*#__PURE__*/_jsxDEV(Link, {\n              to: \"/books/\" + book._id,\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: [book.title, \" by \", book.authors]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(DeleteBtn, {\n              onClick: () => deleteBook(book._id)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 17\n            }, this)]\n          }, book._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this) : /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"No Results to Display\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Books, \"UqfM0h0i9og713UvocqePx2+GPk=\");\n\n_c = Books;\nexport default Books;\n\nvar _c;\n\n$RefreshReg$(_c, \"Books\");","map":{"version":3,"sources":["/Users/ivanflores/Desktop/UCI_HW/Google-Books/client/src/pages/Saved.js"],"names":["React","useState","useEffect","DeleteBtn","Jumbotron","API","Link","Col","Row","Container","List","ListItem","Input","TextArea","FormBtn","Books","books","setBooks","formObject","setFormObject","loadBooks","getBooks","then","res","data","catch","err","console","log","deleteBook","id","handleInputChange","event","target","name","value","handleFormSubmit","preventDefault","title","author","saveBook","synopsis","length","map","book","_id","authors"],"mappings":"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","sourcesContent":["\nimport React, { useState, useEffect } from \"react\";\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport API from \"../utils/API\";\nimport { Link } from \"react-router-dom\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { List, ListItem } from \"../components/List\";\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\n\nfunction Books() {\n  // Setting our component's initial state\n  const [books, setBooks] = useState([])\n  const [formObject, setFormObject] = useState({})\n\n  // Load all books and store them with setBooks\n  useEffect(() => {\n    loadBooks()\n  }, [])\n\n  // Loads all books and sets them to books\n  function loadBooks() {\n    API.getBooks()\n      .then(res => \n        setBooks(res.data)\n      )\n      .catch(err => console.log(err));\n  };\n\n  // Deletes a book from the database with a given id, then reloads books from the db\n  function deleteBook(id) {\n    API.deleteBook(id)\n      .then(res => loadBooks())\n      .catch(err => console.log(err));\n  }\n\n  // Handles updating component state when the user types into the input field\n  function handleInputChange(event) {\n    const { name, value } = event.target;\n    setFormObject({...formObject, [name]: value})\n  };\n\n  // When the form is submitted, use the API.saveBook method to save the book data\n  // Then reload books from the database\n  function handleFormSubmit(event) {\n    event.preventDefault();\n    if (formObject.title && formObject.author) {\n      API.saveBook({\n        title: formObject.title,\n        author: formObject.author,\n        synopsis: formObject.synopsis\n      })\n        .then(res => loadBooks())\n        .catch(err => console.log(err));\n    }\n  };\n    return (\n  <Container>  \n    <Row>    \n        <Col size=\"md-6 sm-12\">\n        <Jumbotron>\n          <h1>Books On My List</h1>\n        </Jumbotron>\n        {books.length ? (\n          <List>\n            {books.map(book => (\n              <ListItem key={book._id}>\n                <Link to={\"/books/\" + book._id}>\n                  <strong>\n                    {book.title} by {book.authors}\n                  </strong>\n                </Link>\n                <DeleteBtn onClick={() => deleteBook(book._id)} />\n              </ListItem>\n            ))}\n          </List>\n        ) : (\n          <h3>No Results to Display</h3>\n        )}\n      </Col>\n    </Row>\n  </Container>\n        )\n}\n\nexport default Books;"]},"metadata":{},"sourceType":"module"}